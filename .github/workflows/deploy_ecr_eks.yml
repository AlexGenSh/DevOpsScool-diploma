name: Deploy_ECR_EKS
# Create new K8s deployment or update existing one
# Includes SonarCloud scan

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: flasktest
  ECR_REPOSITORY: test-repo

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build_and_deploy"
  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Cancel Previous Runs               
        uses: styfle/cancel-workflow-action@0.4.1
        with:                                    
          access_token: ${{ github.token }}
      
      - name: Checkout                                  
        uses: actions/checkout@v2
     
#     - name: SonarCloud Scan
#       uses: SonarSource/sonarcloud-github-action@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%d-%b-%H-%M-%S')"

      - name: Configure AWS credentials                          
        uses: aws-actions/configure-aws-credentials@v1           
        with:                                                    
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}        
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
    
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        env:
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.date.outputs.date }}
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ env.RELEASE_IMAGE }}
          build-args: |
            VAR1=${{ secrets.DB_ADMIN_USERNAME }}
            VAR2=${{ secrets.DB_ADMIN_PASSWORD }}
            VAR3=${{ secrets.DB_URL }}
#          build-args: VAR1=${{ secrets.DB_ADMIN_USERNAME }},VAR2=${{ secrets.DB_ADMIN_PASSWORD }},VAR3=${{ secrets.DB_URL }}

      - name: Print ENV variables
        run: |
          echo  ${{ VAR1 }} ${{ VAR2 }} ${{ VAR3 }}


      - name: Compose YAML for create namespace
        run: |
          printf "apiVersion: v1\nkind: Namespace\nmetadata:\n name: ${{ env.KUBE_NAMESPACE }}" > k8ns.yaml

      - name: Compose YAML for initial Kubernetes deployment
        env:
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.date.outputs.date }}
        run: |
          printf "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: flaskapptest\n  namespace: ${{ env.KUBE_NAMESPACE }}\n  labels:\n    app: flaskapptest\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: flaskapptest\n  template:\n    metadata:\n      name: flasktemplate1\n      labels:\n        app: flaskapptest\n    spec:\n      containers:\n      - image: ${{ env.RELEASE_IMAGE }}\n        name: flaskcontainer\n        env:\n        - name: DB_ADMIN_USERNAME\n          value: ${{ env.DB_ADMIN_USERNAME}}\n        - name: DB_ADMIN_PASSWORD\n          value: ${{ env.DB_ADMIN_PASSWORD}}\n        - name: DB_URL\n          value: ${{ env.DB_URL}}" > k8s.yaml
#        run: |
#          printf "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: flaskapptest\n  labels:\n    app: flaskapptest\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: flaskapptest\n  template:\n    metadata:\n      name: flasktemplate1\n      labels:\n        app: flaskapptest\n    spec:\n      containers:\n      - image: ${{ env.RELEASE_IMAGE }}\n        name: flaskcontainer\n        env:\n        - name: DB_ADMIN_USERNAME\n          value: ${{ env.DB_ADMIN_USERNAME}}\n        - name: DB_ADMIN_PASSWORD\n          value: ${{ env.DB_ADMIN_PASSWORD}}\n        - name: DB_URL\n          value: ${{ env.DB_URL}}" > k8s.yaml


      - name: Check deployment status
        id: deploy_status
#        uses: Consensys/kubernetes-action@master
        uses: kodermax/kubectl-aws-eks@master
        with:
          args: get deploy -A
    
      - name: Print deployment status and ENV
        env:
          DEPLOY_STATUS: ${{ steps.deploy_status.outputs.result }}
        run: |
          echo  ${{ steps.deploy_status.outputs.result }}

      - name: Create test namecpaces
        if: contains( env.DEPLOY_STATUS, 'flasktest') != 'true'
        uses: kodermax/kubectl-aws-eks@master
        with:
          args: apply -f k8ns.yaml
      
      - name: Create new Kubernetes deployment
        if: contains( env.DEPLOY_STATUS, 'flaskapptest') != 'true'
        uses: kodermax/kubectl-aws-eks@master                                                                         
        env:                                                                                                          
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.date.outputs.date }}
        with:                                                                                                         
          args: apply -f k8s.yaml

      - name: Update Kubernetes deployment
        if: contains( env.DEPLOY_STATUS, 'flaskapptest') == 'true'
        uses: kodermax/kubectl-aws-eks@master                                                                         
        env:                                                                                                          
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.date.outputs.date }}
        with:                                                                                                         
          args: set image deployment/flaskapptest flaskcontainer=${{ env.RELEASE_IMAGE }} -n ${{ env.KUBE_NAMESPACE }}
